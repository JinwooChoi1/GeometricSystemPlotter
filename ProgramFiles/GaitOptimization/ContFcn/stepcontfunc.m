function [H, JH, projvec, stop] = stepcontfunc(y,s,gopt)%,lb,ub,writerObj)
    %%%%%%%%%%%%%
    % This function calculates the system of equations so that it gives zero
    % if the point is at the optimum. The system of equation is built by
    % the KKT conditions. It will be solved by the numerical continuation.
    % 
    %
    % Inputs:
    %
    % y: The continuation variables. It contains [p; sigma; lambda; mu; c].
    %   p : the fourier descriptor of the gait.
    %   sigma,lambda,mu : the lagrange multiplier
    %   c : the continuation variables.
    % s: System file which contains the connection vector field, CCF's and
    %   metric data
    % gopt: struct generated by optimalgaitoptions().
    %
    % Outputs:
    %
    % H : The continuation function.
    % JH : Jacobian of the continuation function.
    % projvec : The predictor guidance vector.
    % stop : stop condtion. If c is small enough, stop the pc iteration.
    %
    %%%%%%%%%%%%%

    dimension = gopt.dimension;
    direction = gopt.direction;
    nptotal = gopt.nftotal - dimension; % exclude frequency term.
    p = contvardistributor(y,gopt);
    
    % Because of ODE solver, size of p is the number of fourier coefficient*dimension x 1
    p = reshape(p,[], dimension);
    p = [p; 2*pi*ones(1,dimension)];

    const = struct();
    obj = struct();

    % Derive the Hessian and gradient of the cost and equality constraint.
    [jacobfourier,temp_disp,temp_stroke,~] = evaluate_jacobian_fourier(p,s,gopt);
    const.f = temp_disp(direction);
    obj.f = temp_stroke;
    
    % Reshape jacobdisp and jacobstorke for ODE Solver.
    const.gf = reshape(jacobfourier.disp,[nptotal 1]);
    obj.gf = reshape(jacobfourier.stroke,[nptotal 1]);

    hessfourier = numerhessfourier(p,s,gopt);
    const.hf = cell2mat(hessfourier.disp);
    obj.hf = cell2mat(hessfourier.stroke);
    projvec = [zeros(length(y)-1,1); -1];
    [H,JH] = constructHfunc(y,obj,const,gopt);

    % Set the stop condition.
    if const.f < 1e-3
        stop = 1;
    else
        stop = 0;
    end
end